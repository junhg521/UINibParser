#!/bin/sh

# create: 2016/10/16
# version: 0.0.1
# author: Junhg
# contribute:
# 

# describle：
# 1. 将工程中的资源文件中的资源信息加载到实现文件中
# 2. 删除所有的xib文件，优化工程的代码大小

export LC_CTYPE=C 
export LANG=C

declare currentDir=`echo $PWD`
declare projectDir=""
declare absolutePath=${currentDir}
declare parseResource="NibProcessor/parseResource.py"
declare resourceFileName=""
declare resourceFileDir=""
declare parseObjcType="objc"
declare needloadConfiguration=0

if [[ $# -lt 1 ]]; then
	echo "Usage: args [-o] [-s] [-f fileName] [-d fileDir]"
    echo "-o means parse resource file adapte objc syntax, defalut adapte objc syntax"
    echo "-s means parse resource file adapte swift syntax, you should use'-s' if you want parse resource file to switf syntax"
    echo "-f means parese resource file name"
    echo "-d means parse all resouce file in directory"
    exit 1
elif [[ $1 =~ "-*" ]]; then
	
	echo "Usage: args [-o] [-s] [-f fileName] [-d fileDir]"
    echo "-o means parse resource file adapte objc syntax, defalut adapte objc syntax"
    echo "-s means parse resource file adapte swift syntax, you should use'-s' if you want parse resource file to switf syntax"
    echo "-f means parese resource file name"
    echo "-d means parse all resouce file in directory"
    exit 1
fi

while getopts ":osd:f:" option; do
	case $option in
		o)
			parseObjcType="objc"
			;;
		s)
			parseObjcType="swift"
			echo "exchange xib file to swift code is not accpted for the moment"
			;;
		f) 
			resourceFileName=${OPTARG}
			;;
		d)
			resourceFileDir=${OPTARG}
			;;
		\? )
			echo "Usage: args [-o] [-s] [-f fileName] [-d fileDir]"
    		echo "-o means parse resource file adapte objc syntax, defalut adapte objc syntax"
    		echo "-s means parse resource file adapte swift syntax, you should use'-s' if you want parse resource file to switf syntax"
    		echo "-f means parese resource file name"
    		echo "-d means parse all resouce file in directory"
   			exit 1
            ;;
	esac
done

function stringByAddingPercentEscape()
{
	declare local escapeCharacter=""

	for x in $(seq 1 ${#1}); do
		location=`expr $x - 1`
		character=${1:$location:1}

		if [[ "${character}" == "(" ]] || [[ "${character}" == ")" ]] || [[ "${character}" == "[" ]] || [[ "${character}" == "]" ]] || [[ "${character}" == '"' ]]; then
			escapeCharacter=${escapeCharacter}"$2\\"${character}
		else
			if [[ "${character}" == '"' ]]; then
				escapeCharacter=${escapeCharacter}"\\"${character}
			else
				escapeCharacter=${escapeCharacter}${character}
			fi
		fi
	done
	
	if [[ "$__originvar" ]]; then
		eval $__originvar="${escapeCharacter}"
	else
		echo "${escapeCharacter}"
	fi
}

function modifyIBOutletPropertyInSourceFile()
{
	sed -i "" "s/@property.*IBOutlet/@property \(nonatomic, strong\)/g" $1
}

function modifyAwakeFromNibInSourceFile()
{
	File_Properties=`grep -n "\[.*super.*awakeFromNib.*\]" $1`

	if [[ ${#File_Properties} -gt 0 ]]; then
		needloadConfiguration=1
		sed -i "" "/\[.*super.*awakeFromNib.*\]/d" ${1}
		sed -i "" "s/awakeFromNib/loadConfigCellInfo/g" ${1}
	else
		needloadConfiguration=0
	fi
}

function modifyRegisterNibToClass()
{
	registers=`grep -n "registerNib.*UINib.*nibWithNibName.*bundle" ${1} |  cut -d ':' -f 4`
	declare registerClassName=""
	for register in ${registers}; do
		if [[ ${register} == "bundle" ]]; then
			origin=`stringByAddingPercentEscape "${registerClassName}" ".*"`
			destination=`stringByAddingPercentEscape "${registerClassName}" ""`
			sed -i "" "s/registerNib.*UINib.*nibWithNibName.*$origin.*bundle:nil\]/registerClass:NSClassFromString\($destination\)/g" $1
			registerClassName=""
		else
			registerClassName=${registerClassName}${register}" "
		fi
	done
}

function modifyNibInitialToCodeInitial()
{
	registers=`grep -n "UINib.*nibWithNibName.*bundle.*.instantiateWithOwner" ${1} | cut -d ':' -f 3`
	registerClassName=""
	for register in ${registers}; do
		if [[ ${register} == "bundle" ]]; then
			origin=`stringByAddingPercentEscape "${registerClassName}" ".*"`
			destination=`stringByAddingPercentEscape "${registerClassName}" ""`
			sed -i "" "s/\[.*UINib.*nibWithNibName.*$origin.*bundle.*.instantiateWithOwner.*/\[\[NSClassFromString\(${destination}\) alloc\] init\];/g" $1
			registerClassName=""
		else
			registerClassName=${registerClassName}${register}" "
		fi
	done
}

function modifyBundleInitialToCodeInitial()
{
	registers=`grep -n "NSBundle.*mainBundle.*loadNibNamed.*owner.*options" ${1} | cut -d ':' -f 3`
	registerClassName=""
	for register in ${registers}; do
		if [[ ${register} == "owner" ]]; then
			origin=`stringByAddingPercentEscape "${registerClassName}" ".*"`
			destination=`stringByAddingPercentEscape "${registerClassName}" ""`
			sed -i "" "s/\[.*NSBundle.*mainBundle.*loadNibNamed.*$origin.*owner.*options.*/\[\[NSClassFromString\(${destination}\) alloc\] init\];/g" $1
			registerClassName=""
		else
			registerClassName=${registerClassName}${register}" "
		fi
	done
}	

function deleteResourceFileFromProject()
{
	projectFiles=`find ${absolutePath} -name "*.pbxproj" -type f`
	for projectFile in ${projectFiles}; do
		sed -i "" "/$1/d" ${projectFile}
	done
}

function executeParseXib()
{
	headerFileDir=${1/%.xib/.h}
	sourceFileDir=${1/%.xib/.m}
	modifyIBOutletPropertyInSourceFile ${headerFileDir}
	modifyIBOutletPropertyInSourceFile ${sourceFileDir}
	modifyAwakeFromNibInSourceFile ${sourceFileDir}
	modifyRegisterNibToClass ${sourceFileDir}
	modifyNibInitialToCodeInitial ${sourceFileDir}
	modifyBundleInitialToCodeInitial ${sourceFileDir}
	python ${parseResource} ${1} ${needloadConfiguration}
	deleteResourceFileFromProject ${1##*/}
	rm -rf ${1}
}

function loadProjectDir()
{
	declare local relativePath=""
	if [[ -n $resourceFileName ]]; then
		relativePath=${resourceFileName%/*}
	elif [[ -n $resourceFileDir ]]; then
		relativePath=$resourceFileDir
	else
		echo "you should add \`-d\` or \`-f\` option to \`parseResource\` command"
		exit 1
	fi

	declare local lookforDir=""
	lookforDir=`ls ${currentDir}/${relativePath} | awk "/.xcodeproj|.xcworkspace/"`
	while [[ -z ${lookforDir} && ${lookforDir} != ${currentDir} ]]; do
		relativePath=${relativePath%/*}
		absolutePath=${currentDir}/${relativePath}
		lookforDir=`ls ${currentDir}/${relativePath} | awk "/.xcodeproj|.xcworkspace/"`
	done

	lookforDir=(${lookforDir})
	if [[ ${#lookforDir[@]} -eq 2 ]]; then
		projectDir=${absolutePath}/${lookforDir[1]}
	elif [[ ${#lookforDir[@]} -eq 1 ]]; then
		projectDir=${absolutePath}/${lookforDir[0]}
	fi
}

function main()
{
	loadProjectDir
	startTime=$((`date +%s`))
	declare local parseNibCount=0

	ps -ef | grep "/Applications/Xcode.app/Contents/MacOS/Xcode" | grep -v grep | awk '{print $2}' | xargs kill -9

	# add execute permission for parseResource file
	chmod +x ${currentDir}/${parseResource}

	if [[ -n ${resourceFileName} ]]; then
		resourceFileExtension=${resourceFileName##*.}
		if [[ ${resourceFileExtension} != 'xib' ]]; then
			echo "can't parse ${resourceFileExtension} extension name"
			exit 1
		fi

		parseNibCount=1
		executeParseXib ${currentDir}/${resourceFileName}
	elif [[ -n ${resourceFileDir} ]]; then
		length=`expr ${#resourceFileDir} - 1`
		module_Dir=${currentDir}
		if [[ ${resourceFileDir:$length:1} == '/' ]]; then
			module_Dir=${currentDir}/${resourceFileDir:0:$length}
		else
			module_Dir=${currentDir}/${resourceFileDir}
		fi
		
		# echo "module_Dir=${module_Dir}"
		All_Resource_File=`find ${module_Dir} -name "*.xib" -type f`
		for resourceFile in $All_Resource_File; do
			parseNibCount=`expr ${parseNibCount} + 1`
			executeParseXib ${resourceFile}
		done

		AllResourceFiles=(${All_Resource_File})
		parseNibCount=${#AllResourceFiles[@]}
	fi

	# remove py product pyc file
	find ${currentDir}/NibProcessor -name "*.pyc" | xargs rm -rf

	# open workspace
	open ${projectDir}
	
	endTime=$((`date +%s`))
	expressTime=`expr ${endTime} - ${startTime}`
	echo "parse ${parseNibCount} xib file in all，time consumed：${expressTime} second"
}

# exec
main
